package com.oeong.ui;

import com.intellij.ui.components.JBLabel;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.oeong.tools.PwdTools;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ItemEvent;
import java.util.Locale;

public class RandomPwdUI {
    private JButton pwdButton;
    private JComboBox typeBox;
    private JTextArea yourPasswordTextArea;
    private JRadioButton aZRadioButton;
    private JRadioButton capitalRadio;
    private JRadioButton supRadioButton;
    private JRadioButton a09RadioButton;

    private JComboBox joinerBox;

    private JLabel joinerLabel;

    private JComboBox lenBox;
    private JButton copyPwdBtn;
    private JPanel container;

    public static String random = "Random-PWD";
    public static String easy = "Easy-Remember-PWD";
    public static String pin = "PIN";
    PwdTools pwdTools;
    private void createUIComponents() {
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
        typeBox.addItemListener(this::radioAction);
        pwdTools = new PwdTools(this);
        pwdButton.addActionListener(e->{
            var pwd = pwdTools.createPwd((String) this.typeBox.getSelectedItem());
            yourPasswordTextArea.setText(pwd);
        });

        copyPwdBtn.addActionListener(e->{
            // 获取系统剪贴板
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            // 将字符串复制到剪贴板
            StringSelection selection = new StringSelection(yourPasswordTextArea.getText());
            clipboard.setContents(selection, null);
        });
    }

    private void radioAction(ItemEvent e) {
        if(random.equals(e.getItem())){
            a09RadioButton.setVisible(true);
            aZRadioButton.setVisible(true);
            capitalRadio.setVisible(true);
            supRadioButton.setVisible(true);
            joinerLabel.setVisible(false);
            joinerBox.setVisible(false);
            a09RadioButton.setEnabled(true);
        }else if(easy.equals(e.getItem())){
            a09RadioButton.setVisible(false);
            aZRadioButton.setVisible(false);
            capitalRadio.setVisible(false);
            supRadioButton.setVisible(false);
            joinerBox.setVisible(true);
            joinerLabel.setVisible(true);
        }else {
            a09RadioButton.setVisible(true);
            aZRadioButton.setVisible(false);
            capitalRadio.setVisible(false);
            supRadioButton.setVisible(false);
            joinerBox.setVisible(false);
            joinerLabel.setVisible(false);
            a09RadioButton.setEnabled(false);
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        container = new JPanel();
        container.setLayout(new FlowLayout(FlowLayout.LEFT));
//        container.setEnabled(false);
//        container.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        container.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel1.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JBLabel();
        label1.setText("Length:");
        panel2.add(label1);
        lenBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        for(int i=3;i<=40;i++){
            defaultComboBoxModel1.addElement(i);
        }
        lenBox.setModel(defaultComboBoxModel1);
        panel2.add(lenBox);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel1.add(panel3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        a09RadioButton = new JRadioButton();
        a09RadioButton.setSelected(true);
        a09RadioButton.setText("0-9");
        panel3.add(a09RadioButton);
        aZRadioButton = new JRadioButton();
        aZRadioButton.setText("a-z");
        aZRadioButton.setSelected(true);
        aZRadioButton.setEnabled(false);
        panel3.add(aZRadioButton);
        capitalRadio = new JRadioButton();
        capitalRadio.setText("A-Z");
        capitalRadio.setSelected(true);
        panel3.add(capitalRadio);
        supRadioButton = new JRadioButton();
        supRadioButton.setSelected(true);
        supRadioButton.setText("Special Characters");
        panel3.add(supRadioButton);
        joinerLabel = new JBLabel();
        joinerLabel.setText("Joiner:");
        joinerLabel.setVisible(false);
        panel3.add(joinerLabel);
        joinerBox = new JComboBox();
        var joinerComboBoxModel1=new DefaultComboBoxModel();
        joinerComboBoxModel1.addElement("-");
        joinerComboBoxModel1.addElement("");
        joinerComboBoxModel1.addElement("/");
        joinerComboBoxModel1.addElement("_");
        joinerComboBoxModel1.addElement("#");
        joinerComboBoxModel1.addElement("%");
        joinerComboBoxModel1.addElement("^");
        joinerComboBoxModel1.addElement("&");
        joinerComboBoxModel1.addElement("*");
        joinerComboBoxModel1.addElement("@");
        joinerComboBoxModel1.addElement("!");
        joinerBox.setModel(joinerComboBoxModel1);
        joinerBox.setVisible(false);
        panel3.add(joinerBox);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.add(panel4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        pwdButton = new JButton();
        pwdButton.setText("Create");
        panel4.add(pwdButton);
        copyPwdBtn = new JButton();
        copyPwdBtn.setText("Copy");
        panel4.add(copyPwdBtn);
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(300, 150), new Dimension(300, 150), new Dimension(300, 150), 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        yourPasswordTextArea = new JTextArea();
//        yourPasswordTextArea.setBackground(new Color(-4851457));
        yourPasswordTextArea.setColumns(10);
        yourPasswordTextArea.setText("your password");
        yourPasswordTextArea.setLineWrap(true);
        Font yourPasswordTextAreaFont = this.$$$getFont$$$("Consolas", -1, 15, yourPasswordTextArea.getFont());
        if (yourPasswordTextAreaFont != null) yourPasswordTextArea.setFont(yourPasswordTextAreaFont);
        scrollPane1.setViewportView(yourPasswordTextArea);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel1.add(panel5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JBLabel();
        label2.setText("Type:");
        panel5.add(label2);
        typeBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement(random);
        defaultComboBoxModel2.addElement(easy);
        defaultComboBoxModel2.addElement(pin);
        typeBox.setModel(defaultComboBoxModel2);
        panel5.add(typeBox);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return container;
    }


    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    public JPanel getContainer() {
        return container;
    }

    public JButton getPwdButton() {
        return pwdButton;
    }

    public JComboBox getTypeBox() {
        return typeBox;
    }

    public JTextArea getYourPasswordTextArea() {
        return yourPasswordTextArea;
    }

    public JRadioButton getaZRadioButton() {
        return aZRadioButton;
    }

    public JRadioButton getCapitalRadio() {
        return capitalRadio;
    }

    public JRadioButton getSupRadioButton() {
        return supRadioButton;
    }

    public JRadioButton getA09RadioButton() {
        return a09RadioButton;
    }

    public JComboBox getJoinerBox() {
        return joinerBox;
    }

    public JLabel getJoinerLabel() {
        return joinerLabel;
    }

    public JComboBox getLenBox() {
        return lenBox;
    }

    public JButton getCopyPwdBtn() {
        return copyPwdBtn;
    }

}
